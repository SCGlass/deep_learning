{"trial_id": "01", "hyperparameters": {"space": [{"class_name": "Int", "config": {"name": "n_nodes_1", "default": null, "conditions": [], "min_value": 0, "max_value": 20, "step": 1, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "n_nodes_2", "default": null, "conditions": [], "min_value": 0, "max_value": 10, "step": 1, "sampling": "linear"}}], "values": {"n_nodes_1": 15, "n_nodes_2": 8}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"/home/sam_glass/deep_learning/venv/lib/python3.10/site-packages/keras_tuner/src/engine/base_tuner.py\", line 273, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"/home/sam_glass/deep_learning/venv/lib/python3.10/site-packages/keras_tuner/src/engine/base_tuner.py\", line 238, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n  File \"/home/sam_glass/deep_learning/venv/lib/python3.10/site-packages/keras_tuner/src/engine/tuner.py\", line 314, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n  File \"/home/sam_glass/deep_learning/venv/lib/python3.10/site-packages/keras_tuner/src/engine/tuner.py\", line 233, in _build_and_fit_model\n    results = self.hypermodel.fit(hp, model, *args, **kwargs)\n  File \"/home/sam_glass/deep_learning/venv/lib/python3.10/site-packages/keras_tuner/src/engine/hypermodel.py\", line 149, in fit\n    return model.fit(*args, **kwargs)\n  File \"/home/sam_glass/deep_learning/venv/lib/python3.10/site-packages/keras/src/utils/traceback_utils.py\", line 70, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"/home/sam_glass/deep_learning/venv/lib/python3.10/site-packages/keras/src/engine/data_adapter.py\", line 1776, in train_validation_split\n    raise ValueError(\nValueError: `validation_split` is only supported for Tensors or NumPy arrays, found following types in the input: [<class 'tensorflow.python.data.ops.prefetch_op._PrefetchDataset'>]\n"}